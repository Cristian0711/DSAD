################################################### read a csv file ###################################################
df = pd.read_csv('students.csv')

################################################### find a specific data by a criteria ################################
student_name = "John Doe"
student_data = df[df['Student Name'] == student_name]

if not student_data.empty:
    # Extract age and average grade
    age = student_data['Age'].values[0]
    avg_grade = student_data['Avg Grade'].values[0]

    print(f"Student: {student_name}")
    print(f"Age: {age}")
    print(f"Average Grade: {avg_grade}")
else:
    print(f"Student {student_name} not found in the dataset.")
	
###################################################	filter dataset by criteria  #########################################
grade_threshold = 9.0
filtered_students = df[df['Avg Grade'] > grade_threshold]

if not filtered_students.empty:
    print("Students with an average grade above the threshold:")
    print(filtered_students)
else:
    print(f"No students found with an average grade above {grade_threshold}.")
	
################################################### sort dataset #########################################################
sorted_df = df.sort_values(by='Avg Grade', ascending=False)
print(sorted_df)

################################################### update user ##########################################################
student_name = "John Doe"
new_avg_grade = 9.0

df.loc[df['Student Name'] == student_name, 'Avg Grade'] = new_avg_grade

################################################### average grade group by age ############################################
age_group_avg_grade = df.groupby('Age')['Avg Grade'].mean()


################################################### matrice rara ##########################################################
from array import array
class matrice_rara():
    def __init__(self, i, j, x, n, m):
        if not isinstance(i, (list, tuple, array)):
            raise Exception("Tip nepermis pentru indecsii de linie!")
        if not isinstance(j, (list, tuple, array)):
            raise Exception("Tip nepermis pentru indecsii de coloana!")
        if not isinstance(x, (list, tuple, array)):
            raise Exception("Tip nepermis pentru valori!")
        if len(i) != len(x) or len(j) != len(x):
            raise Exception("Dimensiuni incorecte!")
        if max(i) >= n or max(j) >= m:
            raise Exception("Valori incorecte pentru m sau n!")
        self.__i = array("i", i)
        self.__j = array("i", j)
        self.__x = array("d", x)
        self.__n = n
        self.__m = m

    @property
    def i(self):
        return self.__i

    @property
    def j(self):
        return self.__j

    @property
    def x(self):
        return self.__x

    @property
    def n(self):
        return self.__n

    @property
    def m(self):
        return self.__m

    @n.setter
    def n(self, n):
        if max(self.__i) >= n:
            raise Exception("Valoare incorecta pentru n!")
        self.__n = n

    @m.setter
    def m(self, m):
        if max(self.__j) >= m:
            raise Exception("Valoare incorecta pentru m!")
        self.__m = m

    def __str__(self):
        out = []
        for v in zip(self.__i, self.__j, self.__x):
            out.append(v)
        return str(out) + str((self.__n, self.__m))

    def __eq__(self, other):
        assert isinstance(other, matrice_rara)
        # return self.__i==other.__i and self.__j==other.__j and self.__x==other.__x and self.__n==other.__n and self.__m==other.__m
        l_self = sorted(zip(self.__i, self.__j, self.__x), key=lambda x: x[2])
        l_other = sorted(zip(other.__i, other.__j, other.__x), key=lambda x: x[2])
        return l_self == l_other

    def add(self, i, j, x):
        self.__i.append(i)
        self.__j.append(j)
        self.__x.append(x)

class matrice_diagonala(matrice_rara):
    def __init__(self, x):
        if not isinstance(x, (list, tuple, array)):
            raise Exception("Tip nepermis pentru valori!")
        super().__init__([v for v in range(len(x))], [v for v in range(len(x))],
                         x, len(x), len(x))
						 

from clase import *

try:
    a = matrice_rara([10, 0, 20], [15, 0, 25], (200, 100, 300), 25, 40)
    print("a:", a)
    print("Indecsi linie:", a.i)
    # a.n = 50
    b = matrice_diagonala([111, 222, 888, 999])
    print("Matricea diagonala b:", b)
    c = matrice_rara([0, 10, 20], [0, 15, 25], (100, 200, 300), 25, 40)
    print("Egalitate intre a si c:", a == c)
except Exception as ex:
    print("Eroare!!!", ex.with_traceback(), sep="\n")


################################################### SEMINAR 2 #############################################################
# Citirea fișierului CSV
df = pd.read_csv('Educatie.csv')

# 1. Determinarea numărului de absolvenți și populației școlară
# Adăugarea unui nou câmp pentru numărul total de absolvenți și populația școlară
df['Total Absolventi'] = df['Abs_liceal'] + df['Abs_postlic'] + df['Abs_primar_gimn'] + df['Abs_profes'] + df['Abs_tehnic'] + df['Abs_univ']
df['Total Populatie Scolara'] = df['Pop_liceal'] + df['Pop_profess'] + df['Pop_primar_gimn'] + df['Pop_univ']

# 2. Calculul mediilor, abaterilor standard și coeficienților de variație pentru fiecare variabilă numerică
numeric_cols = ['Abs_liceal', 'Abs_postlic', 'Abs_primar_gimn', 'Abs_profes', 'Abs_tehnic', 'Abs_univ',
                'Pop_liceal', 'Pop_profess', 'Pop_primar_gimn', 'Pop_univ']

# Calculăm media, abaterea standard și coeficientul de variație
mean_values = df[numeric_cols].mean()
std_values = df[numeric_cols].std()
cv_values = std_values / mean_values  # Coeficientul de variație = abaterea standard / medie

# 3. Filtrarea localităților cu valori mai mari decât 0 pentru numărul de absolvenți ai învățământului universitar
filtered_localities = df[df['Abs_univ'] > 0]

# 4. Sortarea descrescătoare a localităților după populația universitară
sorted_localities = df.sort_values(by='Pop_univ', ascending=False)

# 5. Selecția datelor privind populația școlară
population_columns = ['Pop_liceal', 'Pop_profess', 'Pop_primar_gimn', 'Pop_univ']
population_data = df[population_columns]

# 6. Salvarea rezultatelor obținute în fișiere CSV
# Salvăm datele pentru numărul de absolvenți și populația școlară
df[['Siruta', 'Localitate', 'Total Absolventi', 'Total Populatie Scolara']].to_csv('rezultate_absolventi_populatie.csv', index=False)

# Salvăm media, abaterea standard și coeficientul de variație
statistics = pd.DataFrame({
    'Mean': mean_values,
    'Standard Deviation': std_values,
    'Coefficient of Variation': cv_values
})
statistics.to_csv('statistici_variabile.csv')

# Salvăm localitățile cu absolvenți universitari mai mari decât 0
filtered_localities.to_csv('localitati_absolventi_univ.csv', index=False)

# Salvăm localitățile sortate după populația universitară
sorted_localities.to_csv('localitati_sortate_populatie_univ.csv', index=False)

# Salvăm datele privind populația școlară
population_data.to_csv('populatie_scolara.csv', index=False)

print("Rezultatele au fost salvate cu succes.")

######################################################### SEMINAR 3 ######################################################################
import pandas as pd
import numpy as np

# 1. Definirea clasei Student
class Student:
    def __init__(self, name, age, avg_grade):
        self.name = name
        self.age = age
        self.avg_grade = avg_grade

    def __repr__(self):
        return f"Student(name={self.name}, age={self.age}, avg_grade={self.avg_grade})"

# 2. Citirea datelor din fișierul CSV
csv_file = 'students.csv'  # Asigură-te că fișierul este în același director
df = pd.read_csv(csv_file)

# 3. Crearea unei liste de obiecte Student din datele din CSV
students = []
for _, row in df.iterrows():
    students.append(Student(row['Student Name'], row['Age'], row['Avg Grade']))

# 4. Filtrarea studenților cu vârsta > 19
filtered_students = [student for student in students if student.age > 19]

# 5. Crearea unui DataFrame pentru statistici și sortare
filtered_df = pd.DataFrame([{'Student Name': student.name, 'Age': student.age, 'Avg Grade': student.avg_grade} for student in filtered_students])

# 6. Calcularea mediei, deviației standard și varianței
mean_grade = filtered_df['Avg Grade'].mean()
std_deviation = filtered_df['Avg Grade'].std()
variance = filtered_df['Avg Grade'].var()

# 7. Sortarea studenților după nume
sorted_df = filtered_df.sort_values(by='Student Name')

# Afișează rezultatele
print("Studenții cu vârsta > 19:")
print(filtered_df[['Student Name', 'Age', 'Avg Grade']])

print("\nStatisticile pentru studenții cu vârsta > 19:")
print(f"Media notelor: {mean_grade}")
print(f"Deviația standard: {std_deviation}")
print(f"Varianța: {variance}")

print("\nStudenții sortați după nume:")
print(sorted_df[['Student Name', 'Age', 'Avg Grade']])


################################################################# SEMINAR 4 ###################################################################################
import pandas as pd
import numpy as np
from scipy.stats import shapiro, kstest, chi2, norm

# Citirea datelor din fișier
tabel = pd.read_csv("Teritorial_2022.csv", index_col=0)

# Identificarea variabilelor numerice
variabile_numerice = tabel.columns[3:]  # presupunând că primele 3 coloane nu sunt numerice
print("Variabile numerice:", variabile_numerice)

# 1. Înlocuirea valorilor lipsă cu media
tabel[variabile_numerice] = tabel[variabile_numerice].fillna(tabel[variabile_numerice].mean())

# 2. Standardizarea și centrarea datelor
x_c = tabel[variabile_numerice] - tabel[variabile_numerice].mean()
x_std = (x_c / tabel[variabile_numerice].std())

# Salvarea datelor standardizate și centrate
x_c.to_csv("x_c.csv", index=True)
x_std.to_csv("x_std.csv", index=True)

# 3. Calculul matricelor de corelație și covarianță
corelatie = tabel[variabile_numerice].corr()  # Matricea de corelație
covarianta = tabel[variabile_numerice].cov()  # Matricea de covarianță

# Salvarea matricelor de corelație și covarianță
corelatie.to_csv("R.csv")
covarianta.to_csv("V.csv")


# 4. Teste de concordanță pentru distribuția normală
def teste(x, prag=0.1):
    n, m = x.shape
    t_pvalues = np.zeros(shape=(m, 3))
    t_test = np.empty(shape=(m, 3), dtype=bool)

    for j in range(m):
        # Testul Shapiro
        t_pvalues[j, 0] = shapiro(x[:, j])[1]
        # Testul Kolmogorov-Smirnov
        t_pvalues[j, 1] = kstest(x[:, j], "norm")[1]
        # Testul Chi2
        t_pvalues[j, 2] = f_chi2(x[:, j])

    t_test[:, 0] = t_pvalues[:, 0] > prag
    t_test[:, 1] = t_pvalues[:, 1] > prag
    t_test[:, 2] = t_pvalues[:, 2] < prag

    return t_pvalues, t_test


def f_chi2(x):
    n = len(x)
    medie = np.mean(x)
    std = np.std(x)
    hist, bin_edges = np.histogram(x, bins="sturges")
    m = len(hist)
    fe = (norm.cdf(bin_edges[1:], medie, std) - norm.cdf(bin_edges[:-1], medie, std)) * n
    stts = sum((hist - fe) ** 2 / fe)
    return chi2.cdf(stts, m - 1)


# Aplicarea testelor de normalitate pe datele standardizate
t_pvalues, t_test = teste(tabel[variabile_numerice].values)

# Afișarea rezultatelor testelor
print("P-values pentru testele de normalitate:", t_pvalues)
print("Rezultatele testelor de normalitate:", t_test)